-- Inclusão da biblioteca IEEE necessária
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Declaração da entidade do testbench (sem portas, pois é apenas um simulador)
entity FullAdder_TB is
end FullAdder_TB;

-- Arquitetura do testbench
architecture TB of FullAdder_TB is
    -- Component do somador completo a ser testado
    component FullAdder
        Port ( A    : in  STD_LOGIC;
               B    : in  STD_LOGIC;
               Cin  : in  STD_LOGIC;
               Sum  : out STD_LOGIC;
               Cout : out STD_LOGIC);
    end component;

    -- Sinais para conectar ao somador
    signal A, B, Cin : STD_LOGIC;
    signal Sum, Cout : STD_LOGIC;

begin
    -- Instanciando o somador completo
    UUT: FullAdder port map (A => A, B => B, Cin => Cin, Sum => Sum, Cout => Cout);

    -- Processo de teste
    process
    begin
        -- Teste 1: 0 + 0 + 0 = 00
        A   <= '0'; B   <= '0'; Cin <= '0';
        wait for 10 ns;

        -- Teste 2: 0 + 0 + 1 = 01
        A   <= '0'; B   <= '0'; Cin <= '1';
        wait for 10 ns;

        -- Teste 3: 0 + 1 + 0 = 01
        A   <= '0'; B   <= '1'; Cin <= '0';
        wait for 10 ns;

        -- Teste 4: 0 + 1 + 1 = 10
        A   <= '0'; B   <= '1'; Cin <= '1';
        wait for 10 ns;

        -- Teste 5: 1 + 0 + 0 = 01
        A   <= '1'; B   <= '0'; Cin <= '0';
        wait for 10 ns;

        -- Teste 6: 1 + 0 + 1 = 10
        A   <= '1'; B   <= '0'; Cin <= '1';
        wait for 10 ns;

        -- Teste 7: 1 + 1 + 0 = 10
        A   <= '1'; B   <= '1'; Cin <= '0';
        wait for 10 ns;

        -- Teste 8: 1 + 1 + 1 = 11
        A   <= '1'; B   <= '1'; Cin <= '1';
        wait for 10 ns;

        -- Finaliza a simulação
        wait;
    end process;

end TB;
